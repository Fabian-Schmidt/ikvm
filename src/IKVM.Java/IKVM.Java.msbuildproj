<Project>
    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.NET.Sdk\Sdk\Sdk.props" />
    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.MSBuild\buildTransitive\IKVM.MSBuild.props" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\openjdk.props" />

    <PropertyGroup>
        <TargetFrameworks>net472;net6.0</TargetFrameworks>
        <Bootstrap>true</Bootstrap>
    </PropertyGroup>

    <ItemGroup>
        <InternalsVisibleTo Include="IKVM.Runtime" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\IKVM.Runtime-ref\IKVM.Runtime-ref.csproj" Private="False" PrivateAssets="All" IncludeNonPublicTypes="true" />
        <ProjectReference Include="..\IKVM.Java-ref\IKVM.Java-ref.csproj" Private="False" PrivateAssets="All" HideFromJava="true" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="CliWrap" Version="3.5.0" GeneratePathProperty="true" Private="True" />
    </ItemGroup>

    <ItemGroup>
        <TransformValues Include="Name" Value="$(ProductName)" />
        <TransformValues Include="Version" Value="$(Version)" />
        <TransformValues Include="FileVersion" Value="$(FileVersion)" />
        <TransformValues Include="VendorUrl" Value="$(PackageProjectUrl)" />
        <TransformValues Include="VendorUrlBug" Value="$(PackageProjectUrl)/issues/" />
        <TransformValues Include="OpenJdkVersion" Value="$(OpenJdkVersion)" />
        <TransformValues Include="OpenJdkFullVersion" Value="$(OpenJdkFullVersion)" />
        <TransformValues Include="OpenJdkVendor" Value="$(OpenJdkVendor)" />
        <TransformValues Include="OpenJdkImplementationVendor" Value="$(OpenJdkImplementationVendor)" />
        <TransformValues Include="OpenJdkImplementationVersion" Value="$(OpenJdkImplementationVersion)" />
        <TransformValues Include="OpenJdkSpecificationVersion" Value="$(OpenJdkSpecificationVersion)" />
        <TransformValues Include="OpenJdkSpecificationVendor" Value="$(OpenJdkSpecificationVendor)" />
    </ItemGroup>

    <ItemGroup>
        <JavaResource Include="local\**\*" Exclude="local\**\*.java;**\*.tt" ResourcePath="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup>
        <None Include="icedtea_jce\**\*" />
        <None Include="icedtea_rt\**\*" />
        <None Include="local\**\*" />
        <None Include="@(OpenJdkSource)" LinkBase="openjdk\%(PackagePath)" />
        <Compile Include="@(OpenJdkSource)" LinkBase="openjdk\%(PackagePath)" />
        <Convert Include="@(OpenJdkClass)" LinkBase="openjdk\%(PackagePath)" />
        <None Include="@(OpenJdkClass)" LinkBase="openjdk\%(PackagePath)" />
        <JavaResource Include="@(OpenJdkResource)" LinkBase="openjdk\%(PackagePath)" />
        <ExcludeRegex Include="@(OpenJdkExcludeRegex)" />
    </ItemGroup>

    <ItemGroup>
        <Transform Include="local\META-INF\MANIFEST.MF.tt" TargetPath="$(IntermediateOutputPath)transform\local\META-INF\MANIFEST.MF" />
        <JavaResource Include="$(IntermediateOutputPath)transform\local\META-INF\MANIFEST.MF" Visible="False" ResourcePath="META-INF/MANIFEST.MF" Link="local\META-INF\MANIFEST.MF" />
        <Transform Include="local\nashorn\version.properties.tt" TargetPath="$(IntermediateOutputPath)transform\local\nashorn\version.properties" />
        <JavaResource Include="$(IntermediateOutputPath)transform\local\nashorn\version.properties" Visible="False" ResourcePath="nashorn/version.properties" Link="local\nashorn\version.properties" />
    </ItemGroup>

    <ItemGroup>
        <MapFile Include="map.xml" />
    </ItemGroup>

    <Import Project="$(MSBuildThisFileDirectory)..\..\IKVM.deps.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.NET.Sdk\Sdk\Sdk.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.MSBuild\buildTransitive\IKVM.MSBuild.targets" />

    <!-- IKVM.Java uses the java executable from JAVA_HOME -->
    <Target Name="ResolveJava" Condition=" '$(JAVA_HOME)' != '' And '$(JavaPath)' == '' ">
        <PropertyGroup>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\java') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\java'))</JavaPath>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\java.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\java.exe'))</JavaPath>
            <JavaArgs>-Xmx1536M</JavaArgs>
            <JavaExec Condition=" '$(JavaPath)' != '' ">"$(JavaPath)" $(JavaArgs)</JavaExec>
        </PropertyGroup>
        <Message Text="Using java executable found in JAVA_HOME at '$(JavaPath)'." Importance="high" Condition=" '$(JavaPath)' != '' " />
    </Target>

    <!-- IKVM.Java uses the javac executable from JAVA_HOME -->
    <Target Name="ResolveJavaCompiler" Condition=" '$(JAVA_HOME)' != '' And '$(JavaCompilerPath)' == '' ">
        <PropertyGroup>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\javac') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\javac'))</JavaCompilerPath>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\javac.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\javac.exe'))</JavaCompilerPath>
            <JavaCompilerArgs>-J-Xmx1536M</JavaCompilerArgs>
            <JavaCompilerExec Condition=" '$(JavaCompilerPath)' != '' ">"$(JavaCompilerPath)" $(JavaCompilerArgs)</JavaCompilerExec>
        </PropertyGroup>
        <Message Text="Using javac executable found in JAVA_HOME at '$(JavaCompilerPath)'." Importance="high" Condition=" '$(JavaCompilerPath)' != '' " />
    </Target>

    <Target Name="ResolveRmiStubInputItems" DependsOnTargets="CompileJava">
        <ItemGroup>
            <RmiStubInputItem Include="@(Classpath)" />
            <RmiStubInputItem Include="$(ClassOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="ResolveRmiCompiler" Condition=" '$(JAVA_HOME)' != '' And '$(RmiCompilerPath)' == '' ">
        <PropertyGroup>
            <RmiCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\rmic') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\rmic'))</RmiCompilerPath>
            <RmiCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\rmic.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\rmic.exe'))</RmiCompilerPath>
            <RmiCompilerArgs>-J-client -J-Xms128m</RmiCompilerArgs>
            <RmiCompilerExec Condition=" '$(RmiCompilerPath)' != '' ">"$(RmiCompilerPath)" $(RmiCompilerArgs)</RmiCompilerExec>
        </PropertyGroup>
        <Message Text="Using rmic executable found in JAVA_HOME at '$(RmiCompilerPath)'." Importance="high" Condition=" '$(RmiCompilerPath)' != '' " />
    </Target>

    <PropertyGroup>
        <RmiStubsOutputPath>$(IntermediateOutputPath)rmistubs\</RmiStubsOutputPath>
        <_BuildRmiStubsCoreStampFile>$(RmiStubsOutputPath)stamp</_BuildRmiStubsCoreStampFile>
    </PropertyGroup>

    <Target Name="_BuildRmiStubs" DependsOnTargets="ResolveRmiCompiler;ResolveRmiStubInputItems" Inputs="@(RmiStubInputItem)" Outputs="$(_BuildRmiStubsCoreStampFile)">
        <ItemGroup>
            <_RmiCompilerClasspath Include="@(Classpath);$(ClassOutputPath)" />
            <_RmiCompilerArgs Include="@(RmiCompilerArgs)" />
            <_RmiCompilerArgs Include="-nowarn" />
            <_RmiCompilerArgs Include="-bootclasspath" />
            <_RmiCompilerArgs Include="@(_RmiCompilerClasspath, '$([System.IO.Path]::PathSeparator)')" />
            <_RmiCompilerArgs Include="-d" />
            <_RmiCompilerArgs Include="$(RmiStubsOutputPath)" />
        </ItemGroup>
        <PropertyGroup>
            <_RmiCompilerArgs>@(_RmiCompilerArgs, ' ')</_RmiCompilerArgs>
        </PropertyGroup>
        <Delete Files="$(RmiStubsOutputPath)**\*" />
        <MakeDir Directories="$(RmiStubsOutputPath)" />
        <Exec Command="$(RmiCompilerExec) $(_RmiCompilerArgs) %(OpenJdkRmiStub.Flags) $([System.String]::Copy('%(OpenJdkRmiStub.Identity)').Replace('$', '\$'))" Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' " />
        <Exec Command="$(RmiCompilerExec) $(_RmiCompilerArgs) %(OpenJdkRmiStub.Flags) $([System.String]::Copy('%(OpenJdkRmiStub.Identity)'))" Condition=" '$([MSBuild]::IsOSUnixLike())' == 'false' " />
        <Touch Files="$(_BuildRmiStubsCoreStampFile)" AlwaysCreate="true" ForceTouch="true" />
    </Target>

    <PropertyGroup>
        <BuildRmiStubsDependsOn>
            $(BuildRmiStubsDependsOn)
            CompileJava;
            ResolveRmiStubInputItems;
            _BuildRmiStubs;
        </BuildRmiStubsDependsOn>
    </PropertyGroup>

    <Target Name="BuildRmiStubs" DependsOnTargets="$(BuildRmiStubsDependsOn)">
        <ItemGroup>
            <Convert Include="$(RmiStubsOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <Target Name="CleanRmiStubs">
        <Delete Files="$(_BuildRmiStubsCoreStampFile)" />
        <RemoveDir Directories="$(RmiStubsOutputPath)" />
    </Target>

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
            CleanRmiStubs;
        </CoreCleanDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CoreCompileDependsOn>
            BuildRmiStubs;
            $(CoreCompileDependsOn);
        </CoreCompileDependsOn>
    </PropertyGroup>

    <Target Name="ResolveRuntimeJar" Condition=" '$(RuntimeJarPath)' == '' ">
        <PropertyGroup>
            <RuntimeJarPath Condition="Exists('$(JAVA_HOME)\jre\lib\rt.jar')">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\jre\lib\rt.jar'))</RuntimeJarPath>
        </PropertyGroup>
        <Message Text="Using rt.jar found in JAVA_HOME at '$(RuntimeJarPath)'." Importance="high" Condition=" '$(RuntimeJarPath)' != '' " />
    </Target>

    <Target Name="ResolveToolsJar" Condition=" '$(ToolsJarPath)' == '' ">
        <PropertyGroup>
            <ToolsJarPath Condition="Exists('$(JAVA_HOME)\lib\tools.jar')">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\lib\tools.jar'))</ToolsJarPath>
        </PropertyGroup>
        <Message Text="Using tools.jar found in JAVA_HOME at '$(ToolsJarPath)'." Importance="high" Condition=" '$(ToolsJarPath)' != '' " />
    </Target>

    <PropertyGroup>
        <BuildToolsResponseFile>$(IntermediateOutputPath)btclasses.javac.rsp</BuildToolsResponseFile>
        <BuildToolsOutputPath>$(IntermediateOutputPath)btclasses\</BuildToolsOutputPath>
        <BuildToolsStampFile>$(IntermediateOutputPath)BuildTools.stamp</BuildToolsStampFile>
    </PropertyGroup>

    <ItemGroup>
        <BuildOpenJDKToolsSource Include="$(OpenJdkDir)jdk\make\src\classes\**\*.java" />
    </ItemGroup>

    <Target Name="BuildToolsResponseFile" DependsOnTargets="ResolveToolsJar" Inputs="@(BuildOpenJDKToolsSource)" Outputs="$(BuildToolsResponseFile)">
        <Error Text="Could not locate tools.jar." Condition=" '$(ToolsJarPath)' == '' " />
        <Error Text="tools.jar could not be located at '$(ToolsJarPath)'." Condition="!Exists('$(ToolsJarPath)')" />

        <ItemGroup>
            <_BuildToolsJavaCompilerClasspath Include="$(ToolsJarPath)" />
        </ItemGroup>

        <PropertyGroup>
            <_BuildToolsJavaCompilerClasspathArg>@(_BuildToolsJavaCompilerClasspath, '$([System.IO.Path]::PathSeparator)')</_BuildToolsJavaCompilerClasspathArg>
            <_BuildToolsJavaCompilerClasspathArg>$(_BuildToolsJavaCompilerClasspathArg.Replace('\', '\\'))</_BuildToolsJavaCompilerClasspathArg>
        </PropertyGroup>

        <ItemGroup>
            <_BuildToolsJavaCompilerArgs Include="-cp" />
            <_BuildToolsJavaCompilerArgs Include="&quot;$([MSBuild]::Escape('$(_BuildToolsJavaCompilerClasspathArg)'))&quot;" />
            <_BuildToolsJavaCompilerArgs Include="-source" />
            <_BuildToolsJavaCompilerArgs Include="1.8" />
            <_BuildToolsJavaCompilerArgs Include="-target" />
            <_BuildToolsJavaCompilerArgs Include="1.8" />
            <_BuildToolsJavaCompilerArgs Include="-nowarn" />
            <_BuildToolsJavaCompilerArgs Include="-d" />
            <_BuildToolsJavaCompilerArgs Include="$(BuildToolsOutputPath)" />
            <_BuildToolsJavaCompilerArgs Include="@(BuildOpenJDKToolsSource->'%(FullPath)')" />
        </ItemGroup>
        <WriteLinesToFile File="$(BuildToolsResponseFile)" Lines="@(_BuildToolsJavaCompilerArgs)" Overwrite="true" WriteOnlyWhenDifferent="true" />

        <ItemGroup>
            <FileWrites Include="$(BuildToolsResponseFile)" />
        </ItemGroup>
    </Target>

    <Target Name="BuildTools" DependsOnTargets="ResolveJavaCompiler;BuildToolsResponseFile" Inputs="$(BuildToolsResponseFile);@(BuildOpenJDKToolsSource)" Outputs="$(BuildToolsStampFile)">
        <Error Text="Could not locate javac executable." Condition=" '$(JavaCompilerPath)' == '' " />
        <Error Text="javac could not be located at '$(JavaCompilerPath)'." Condition="!Exists('$(JavaCompilerPath)')" />
        <Exec Command="chmod +x $(JavaCompilerPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Delete Files="$(BuildToolsStampFile)" />
        <PropertyGroup>
            <_BuildToolsStartTime>$([System.DateTime]::Now.Ticks)</_BuildToolsStartTime>
        </PropertyGroup>

        <MakeDir Directories="$(BuildToolsOutputPath)" />
        <Message Text="$(JavaCompilerExec) @$(BuildToolsResponseFile)" />
        <Exec Command="$(JavaCompilerExec) @$(BuildToolsResponseFile)" />

        <ItemGroup>
            <_BuildToolsStaleFiles Include="$(BuildToolsOutputPath)**\*.class" Condition=" '%(ModifiedTime)' == '' Or $([System.DateTime]::Parse('%(ModifiedTime)').Ticks) &lt; $(_BuildToolsStartTime) " />
        </ItemGroup>

        <!--<Delete Files="@(_BuildToolsStaleFiles)" />-->
        <Touch Files="$(BuildToolsStampFile)" AlwaysCreate="true" ForceTouch="true" />

        <ItemGroup>
            <_BuildToolsStaleFiles Remove="@(_BuildToolsStaleFiles)" />
        </ItemGroup>

        <ItemGroup>
            <BuildToolsClassFiles Include="$(BuildToolsOutputPath)**\*.class" />
            <FileWrites Include="$(BuildToolsStampFile)" />
            <FileWrites Include="$(BuildToolsOutputPath)**\*.class" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            ResolveToolsJar;
            BuildToolsResponseFile;
            BuildTools;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <GenSrc>$(IntermediateOutputPath)gensrc\</GenSrc>
        <GenLib>$(IntermediateOutputPath)genlib\</GenLib>
        <BuildScriptsDir>$(OpenJdkDir)jdk\make\scripts\</BuildScriptsDir>
    </PropertyGroup>

    <ItemGroup>
        <BuildScripts Include="$(BuildScriptsDir)**\*.sh" />
    </ItemGroup>

    <PropertyGroup>
        <CharacterDataDir>$(OpenJdkDir)jdk\make\data\characterdata\</CharacterDataDir>
        <UnicodeDataDir>$(OpenJdkDir)jdk\make\data\unicodedata\</UnicodeDataDir>
    </PropertyGroup>

    <ItemGroup>
        <CharacterDataItem Include="CharacterDataLatin1" Arg2="" Arg3="-latin1 8" />
        <CharacterDataItem Include="CharacterData00" Arg2="-plane 0" Arg3="11 4 1" />
        <CharacterDataItem Include="CharacterData01" Arg2="-plane 1" Arg3="11 4 1" />
        <CharacterDataItem Include="CharacterData02" Arg2="-plane 2" Arg3="11 4 1" />
        <CharacterDataItem Include="CharacterData0E" Arg2="-plane 14" Arg3="11 4 1" />
        <CharacterDataStaticItem Include="CharacterDataUndefined" />
        <CharacterDataStaticItem Include="CharacterDataPrivateUse" />
    </ItemGroup>

    <Target Name="GenerateCharacterData" DependsOnTargets="BuildTools;ResolveJava" Inputs="$(CharacterDataDir)%(CharacterDataItem.Identity).java.template;$(UnicodeDataDir)UnicodeData.txt;$(UnicodeDataDir)SpecialCasing.txt;$(UnicodeDataDir)PropList.txt;@(BuildToolsClassFiles)" Outputs="$(GenSrc)java\lang\%(CharacterDataItem.Identity).java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <PropertyGroup>
            <_TemplateArg>$(CharacterDataDir)%(CharacterDataItem.Identity).java.template</_TemplateArg>
            <_TemplateArg>$(_TemplateArg.Replace('\', '\\'))</_TemplateArg>
            <_SpecArg>$(UnicodeDataDir)UnicodeData.txt</_SpecArg>
            <_SpecArg>$(_SpecArg.Replace('\', '\\'))</_SpecArg>
            <_SpecialCasingArg>$(UnicodeDataDir)SpecialCasing.txt</_SpecialCasingArg>
            <_SpecialCasingArg>$(_SpecialCasingArg.Replace('\', '\\'))</_SpecialCasingArg>
            <_PropListArg>$(UnicodeDataDir)PropList.txt</_PropListArg>
            <_PropListArg>$(_PropListArg.Replace('\', '\\'))</_PropListArg>
            <_OutputArg>$(GenSrc)java\lang\%(CharacterDataItem.Identity).java</_OutputArg>
            <_OutputArg>$(_OutputArg.Replace('\', '\\'))</_OutputArg>
        </PropertyGroup>

        <ItemGroup>
            <_GenerateCharacterArgs Include="%(CharacterDataItem.Arg2)" />
            <_GenerateCharacterArgs Include="-template" />
            <_GenerateCharacterArgs Include="$(_TemplateArg)" />
            <_GenerateCharacterArgs Include="-spec" />
            <_GenerateCharacterArgs Include="$(_SpecArg)" />
            <_GenerateCharacterArgs Include="-specialcasing" />
            <_GenerateCharacterArgs Include="$(_SpecialCasingArg)" />
            <_GenerateCharacterArgs Include="-proplist" />
            <_GenerateCharacterArgs Include="$(_PropListArg)" />
            <_GenerateCharacterArgs Include="-o" />
            <_GenerateCharacterArgs Include="$(_OutputArg)" />
            <_GenerateCharacterArgs Include="-string" />
            <_GenerateCharacterArgs Include="-usecharforbyte" />
            <_GenerateCharacterArgs Include="%(CharacterDataItem.Arg3)" />
        </ItemGroup>

        <MakeDir Directories="$(GenSrc)java\lang" />
        <Message Importance="high" Text="Generating %(CharacterDataItem.Identity).java" />
        <Exec Command="$(JavaExec) -cp $(BuildToolsOutputPath) build.tools.generatecharacter.GenerateCharacter @(_GenerateCharacterArgs, ' ')" />

        <ItemGroup>
            <Compile Include="$(GenSrc)java\lang\%(CharacterDataItem.Identity).java" />
            <FileWrites Include="$(GenSrc)java\lang\%(CharacterDataItem.Identity).java" />
        </ItemGroup>
    </Target>

    <Target Name="GenerateCharacterDataStatic" Inputs="$(CharacterDataDir)%(CharacterDataStaticItem.Identity).java.template" Outputs="$(GenSrc)java\lang\%(CharacterDataStaticItem.Identity).java">
        <MakeDir Directories="$(GenSrc)java\lang" />
        <Message Importance="high" Text="Generating %(CharacterDataStaticItem.Identity).java" />
        <Copy SourceFiles="$(CharacterDataDir)%(CharacterDataStaticItem.Identity).java.template" DestinationFiles="$(GenSrc)java\lang\%(CharacterDataStaticItem.Identity).java" />

        <ItemGroup>
            <FileWrites Include="$(GenSrc)java\lang\%(CharacterDataStaticItem.Identity).java" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            GenerateCharacterData;
            GenerateCharacterDataStatic;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <ItemGroup>
        <GenerateCharsetDecoderTemplateFile Include="$(OpenJdkDir)jdk\src\share\classes\java\nio\charset\Charset-X-Coder.java.template" OutputFile="$(GenSrc)java\nio\charset\CharsetDecoder.java" />
        <GenerateCharsetEncoderTemplateFile Include="$(OpenJdkDir)jdk\src\share\classes\java\nio\charset\Charset-X-Coder.java.template" OutputFile="$(GenSrc)java\nio\charset\CharsetEncoder.java" />
    </ItemGroup>

    <Target Name="GenerateCharsetDecoder" DependsOnTargets="BuildTools;ResolveJava" Inputs="@(GenerateCharsetDecoderTemplateFile);@(BuildToolsClassFiles)" Outputs="%(GenerateCharsetDecoderTemplateFile.OutputFile)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_GenerateCharsetDecoderArgs Include="-Kdecoder" />
            <_GenerateCharsetDecoderArgs Include="-DA=&quot;A&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Da=&quot;a&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DCode=&quot;Decode&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dcode=&quot;decode&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DitypesPhrase=&quot;bytes in a specific charset&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DotypesPhrase=&quot;sixteen-bit Unicode characters&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Ditype=&quot;byte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dotype=&quot;character&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DItype=&quot;Byte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DOtype=&quot;Char&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dcoder=&quot;decoder&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DCoder=&quot;Decoder&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dcoding=&quot;decoding&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DOtherCoder=&quot;Encoder&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplTypeName=&quot;string&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DdefaultRepl=&quot;\&quot;\\uFFFD\&quot;&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DdefaultReplName=&quot;&lt;tt&gt;\&quot;\\uFFFD\&quot;&lt;/tt&gt;&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplType=&quot;String&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplFQType=&quot;java.lang.String&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DreplLength=&quot;length()&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DItypesPerOtype=&quot;CharsPerByte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DnotLegal=&quot;not legal for this charset&quot;" />
            <_GenerateCharsetDecoderArgs Include="-Dotypes-per-itype=&quot;chars-per-byte&quot;" />
            <_GenerateCharsetDecoderArgs Include="-DoutSequence=&quot;Unicode character&quot;" />
        </ItemGroup>

        <MakeDir Directories="$(GenSrc)java\nio\charset\" />
        <Exec Command="$(JavaExec) -cp $(BuildToolsOutputPath) build.tools.spp.Spp @(_GenerateCharsetDecoderArgs, ' ') &lt; @(GenerateCharsetDecoderTemplateFile) &gt; %(GenerateCharsetDecoderTemplateFile.OutputFile).tmp" />
        <Move SourceFiles="%(GenerateCharsetDecoderTemplateFile.OutputFile).tmp" DestinationFiles="%(GenerateCharsetDecoderTemplateFile.OutputFile)" />

        <ItemGroup>
            <FileWrites Include="%(GenerateCharsetDecoderTemplateFile.OutputFile)" />
        </ItemGroup>
    </Target>

    <Target Name="GenerateCharsetEncoder" DependsOnTargets="BuildTools;ResolveJava" Inputs="@(GenerateCharsetEncoderTemplateFile);@(BuildToolsClassFiles)" Outputs="%(GenerateCharsetEncoderTemplateFile.OutputFile)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_GenerateCharsetEncoderArgs Include="-Kencoder" />
            <_GenerateCharsetEncoderArgs Include="-DA=&quot;An&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Da=&quot;an&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DCode=&quot;Encode&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dcode=&quot;encode&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DitypesPhrase=&quot;sixteen-bit Unicode characters&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DotypesPhrase=&quot;bytes in a specific charset&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Ditype=&quot;character&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dotype=&quot;byte&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DItype=&quot;Char&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DOtype=&quot;Byte&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dcoder=&quot;encoder&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DCoder=&quot;Encoder&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dcoding=&quot;encoding&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DOtherCoder=&quot;Decoder&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplTypeName=&quot;byte array&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DdefaultRepl=&quot;new byte[] { (byte)'?' }&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DdefaultReplName=&quot;&lt;tt&gt;{&lt;/tt&gt;\&amp;nbsp%3B&lt;tt&gt;(byte)'?'&lt;/tt&gt;\&amp;nbsp%3B&lt;tt&gt;}&lt;/tt&gt;&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplType=&quot;byte[]&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplFQType=&quot;byte[]&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DreplLength=&quot;length&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DItypesPerOtype=&quot;BytesPerChar&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DnotLegal=&quot;not a legal sixteen-bit Unicode sequence&quot;" />
            <_GenerateCharsetEncoderArgs Include="-Dotypes-per-itype=&quot;bytes-per-char&quot;" />
            <_GenerateCharsetEncoderArgs Include="-DoutSequence=&quot;byte sequence in the given charset&quot;" />
        </ItemGroup>

        <MakeDir Directories="$(GenSrc)java\nio\charset\" />
        <Message Text="$(JavaExec) -cp $(BuildToolsOutputPath) build.tools.spp.Spp @(_GenerateCharsetEncoderArgs, ' ') &lt; @(GenerateCharsetEncoderTemplateFile) &gt; %(GenerateCharsetEncoderTemplateFile.OutputFile).tmp" />
        <Exec Command="$(JavaExec) -cp $(BuildToolsOutputPath) build.tools.spp.Spp @(_GenerateCharsetEncoderArgs, ' ') &lt; @(GenerateCharsetEncoderTemplateFile) &gt; %(GenerateCharsetEncoderTemplateFile.OutputFile).tmp" />
        <Move SourceFiles="%(GenerateCharsetEncoderTemplateFile.OutputFile).tmp" DestinationFiles="%(GenerateCharsetEncoderTemplateFile.OutputFile)" />

        <ItemGroup>
            <FileWrites Include="%(GenerateCharsetEncoderTemplateFile.OutputFile)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            GenerateCharsetDecoder;
            GenerateCharsetEncoder;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <GenerateCharsetMappingData>$(OpenJdkDir)jdk\make\data\charsetmapping\</GenerateCharsetMappingData>
        <GenerateCharsetMappingJavaSource>$(OpenJdkDir)jdk\make\src\classes\build\tools\charsetmapping\</GenerateCharsetMappingJavaSource>
    </PropertyGroup>

    <ItemGroup>
        <GenerateCharsetMappingTemplate Include="$(GenerateCharsetMappingData)\SingleByte-X.java.template" />
        <GenerateCharsetMappingTemplate Include="$(GenerateCharsetMappingData)\DoubleByte-X.java.template" />
    </ItemGroup>

    <ItemGroup>
        <GenerateCharsetMappingItem Include="sbcs" Source="$(GenerateCharsetMappingData)" Destination="$(GenSrc)sun\nio\cs" />
        <GenerateCharsetMappingItem Include="sjis0213" Source="$(GenerateCharsetMappingData)sjis0213.map" Destination="$(GenSrc)sun\nio\cs\ext\sjis0213.dat" />
        <GenerateCharsetMappingItem Include="euctw" Source="$(GenerateCharsetMappingData)" Destination="$(GenSrc)sun\nio\cs\ext" Copyright="$(GenerateCharsetMappingJavaSource)EUC_TW.java" />
        <GenerateCharsetMappingItem Include="hkscs" Source="$(GenerateCharsetMappingData)" Destination="$(GenSrc)sun\nio\cs\ext" Copyright="$(GenerateCharsetMappingJavaSource)HKSCS.java" />
        <GenerateCharsetMappingItem Include="extsbcs" Source="$(GenerateCharsetMappingData)" Destination="$(GenSrc)sun\nio\cs\ext" />
        <GenerateCharsetMappingItem Include="dbcs" Source="$(GenerateCharsetMappingData)" Destination="$(GenSrc)sun\nio\cs\ext" />
    </ItemGroup>

    <Target Name="GenerateCharsetMapping" DependsOnTargets="BuildTools;ResolveJava" Inputs="@(GenerateCharsetMappingTemplate);@(BuildToolsClassFiles)" Outputs="$(IntermediateOutputPath)\GenerateCharsetMapping.%(GenerateCharsetMappingItem.Identity).stamp">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <_GenerateCharsetMappingArgs Include="%(GenerateCharsetMappingItem.Source)" />
            <_GenerateCharsetMappingArgs Include="%(GenerateCharsetMappingItem.Destination)" />
            <_GenerateCharsetMappingArgs Include="%(GenerateCharsetMappingItem.Identity)" />
            <_GenerateCharsetMappingArgs Include="%(GenerateCharsetMappingItem.Copyright)" Condition=" '%(GenerateCharsetMappingItem.Copyright)' != '' " />
        </ItemGroup>

        <MakeDir Directories="$(GenSrc)sun\nio\cs\;$(GenSrc)sun\nio\cs\ext\" />
        <Message Text="$(JavaExec) -cp $(BuildToolsOutputPath) build.tools.charsetmapping.Main @(_GenerateCharsetMappingArgs, ' ')" />
        <Exec Command="$(JavaExec) -cp $(BuildToolsOutputPath) build.tools.charsetmapping.Main @(_GenerateCharsetMappingArgs, ' ')" />
        <Touch Files="$(IntermediateOutputPath)GenerateCharsetMapping.%(GenerateCharsetMappingItem.Identity).stamp" AlwaysCreate="true" ForceTouch="true" />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)\GenerateCharsetMapping.%(GenerateCharsetMappingItem.Identity).stamp" />
            <FileWrites Include="%(GenerateCharsetMappingItem.Destination)" Condition="Exists('%(GenerateCharsetMappingItem.Destination)')" />
        </ItemGroup>
    </Target>

    <Target Name="GenerateStandardCharsets" DependsOnTargets="BuildTools;ResolveJava" Inputs="@(BuildScripts);@(BuildToolsClassFiles)" Outputs="$(GenSrc)sun\nio\cs\StandardCharsets.java">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <RemoveDir Directories="$(IntermediateOutputPath)GenerateStandardCharsets.dir" />
        <MakeDir Directories="$(IntermediateOutputPath)GenerateStandardCharsets.dir" />

        <PropertyGroup>
            <_Script>$(BuildScriptsDir)genCharsetProvider.sh</_Script>
            <_TempDir>$(IntermediateOutputPath)GenerateStandardCharsets.dir</_TempDir>
            <_JavaExe>$(JavaPath)</_JavaExe>
            <_ScriptDir>$(BuildScriptsDir)</_ScriptDir>
            <_StandardCharsetsFile>$(OpenJdkDir)jdk\src\share\classes\sun\nio\cs\standard-charsets</_StandardCharsetsFile>
            <_DestinationDir>$(GenSrc)sun\nio\cs\</_DestinationDir>
            <_Hasher>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)GenerateStandardCharsets.hasher.sh'))</_Hasher>
            <_BuildToolsOutputPath>$([System.IO.Path]::GetFullPath('$(BuildToolsOutputPath)'))</_BuildToolsOutputPath>
        </PropertyGroup>

        <IkvmWslPath Path="$(_Script)" Condition="$([MSBuild]::IsOsPlatform('Windows'))">
            <Output TaskParameter="Path" PropertyName="_Script" />
        </IkvmWslPath>

        <IkvmWslPath Path="$(_TempDir)" Condition="$([MSBuild]::IsOsPlatform('Windows'))">
            <Output TaskParameter="Path" PropertyName="_TempDir" />
        </IkvmWslPath>

        <IkvmWslPath Path="$(_JavaExe)" Condition="$([MSBuild]::IsOsPlatform('Windows'))">
            <Output TaskParameter="Path" PropertyName="_JavaExe" />
        </IkvmWslPath>

        <IkvmWslPath Path="$(_ScriptDir)" Condition="$([MSBuild]::IsOsPlatform('Windows'))">
            <Output TaskParameter="Path" PropertyName="_ScriptDir" />
        </IkvmWslPath>

        <IkvmWslPath Path="$(_StandardCharsetsFile)" Condition="$([MSBuild]::IsOsPlatform('Windows'))">
            <Output TaskParameter="Path" PropertyName="_StandardCharsetsFile" />
        </IkvmWslPath>

        <IkvmWslPath Path="$(_DestinationDir)" Condition="$([MSBuild]::IsOsPlatform('Windows'))">
            <Output TaskParameter="Path" PropertyName="_DestinationDir" />
        </IkvmWslPath>

        <!-- WSL version of the file launcher java.exe through /init -->
        <WriteLinesToFile File="$(_Hasher)" Lines="/init &quot;$(_JavaExe)&quot; -- build.tools.hasher.Hasher $@" Overwrite="true" Condition="$([MSBuild]::IsOsPlatform('Windows'))">

        </WriteLinesToFile>

        <!-- Non-WSL version of the file launches should simply launch java -->
        <WriteLinesToFile File="$(_Hasher)" Lines="&quot;$(_JavaExe)&quot; build.tools.hasher.Hasher $@" Overwrite="true" Condition="!$([MSBuild]::IsOsPlatform('Windows'))">

        </WriteLinesToFile>

        <ItemGroup>
            <FileWrites Include="$(_Hasher)" />
        </ItemGroup>

        <IkvmWslPath Path="$(_Hasher)" Condition="$([MSBuild]::IsOsPlatform('Windows'))">
            <Output TaskParameter="Path" PropertyName="_Hasher" />
        </IkvmWslPath>

        <IkvmUnixExec Command="chmod" Arguments="+x;$(_Hasher)">

        </IkvmUnixExec>

        <ItemGroup>
            <_GenerateStandardCharsetsEnv Include="CLASSPATH" Value="$(_BuildToolsOutputPath)" />
            <_GenerateStandardCharsetsEnv Include="NAWK" Value="nawk" />
            <_GenerateStandardCharsetsEnv Include="TEMPDIR" Value="$(_TempDir)" />
            <_GenerateStandardCharsetsEnv Include="HASHER" Value="sh -e $(_Hasher)" />
            <_GenerateStandardCharsetsEnv Include="SCRIPTS" Value="$(_ScriptDir)" />
        </ItemGroup>

        <ItemGroup>
            <_GenerateStandardCharsetsArg Include="-e" />
            <_GenerateStandardCharsetsArg Include="$(_Script)" />
            <_GenerateStandardCharsetsArg Include="$(_StandardCharsetsFile)" />
            <_GenerateStandardCharsetsArg Include="$(_DestinationDir)" />
        </ItemGroup>

        <IkvmUnixExec Command="sh" EnvironmentVariables="@(_GenerateStandardCharsetsEnv)" Arguments="@(_GenerateStandardCharsetsArg)" StandardErrorLogLevel="Warning">

        </IkvmUnixExec>

        <ItemGroup>
            <FileWrites Include="$(GenSrc)sun\nio\cs\StandardCharsets.java" />
            <FileWrites Include="$(IntermediateOutputPath)GenerateStandardCharsets.dir\**\*" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            GenerateCharsetMapping;
            GenerateStandardCharsets;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <Target Name="GenerateHtml32DTD" DependsOnTargets="BuildTools;ResolveJava" Inputs="@(BuildScripts);@(BuildToolsClassFiles)" Outputs="$(GenSrc)javax\swing\text\html\parser\html32.bdtd">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <PropertyGroup>
            <_DtdHome>$(OpenJdkDir)jdk\make\data\dtdbuilder</_DtdHome>
        </PropertyGroup>

        <MakeDir Directories="$(GenSrc)javax\swing\text\html\parser\" />
        <Message Text="$(JavaExec) -Ddtd_home=$(_DtdHome.Replace('\', '\\')) -Djava.awt.headless=true -cp $(BuildToolsOutputPath) build.tools.dtdbuilder.DTDBuilder html32 > $(GenSrc)javax\swing\text\html\parser\html32.bdtd.tmp" />
        <Exec Command="$(JavaExec) -Ddtd_home=$(_DtdHome.Replace('\', '\\')) -Djava.awt.headless=true -cp $(BuildToolsOutputPath) build.tools.dtdbuilder.DTDBuilder html32 > $(GenSrc)javax\swing\text\html\parser\html32.bdtd.tmp" />
        <Move SourceFiles="$(GenSrc)javax\swing\text\html\parser\html32.bdtd.tmp" DestinationFiles="$(GenSrc)javax\swing\text\html\parser\html32.bdtd" OverwriteReadOnlyFiles="true" />
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            GenerateHtml32DTD;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <Target Name="GenerateCaCerts" DependsOnTargets="BuildTools;ResolveJava" Inputs="@(BuildScripts);@(BuildToolsClassFiles)" Outputs="$(GenSrc)javax\swing\text\html\parser\html32.bdtd">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath)" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <PropertyGroup>
            <_DtdHome>$(OpenJdkDir)jdk\make\data\dtdbuilder</_DtdHome>
        </PropertyGroup>

        <MakeDir Directories="$(GenLib)javax\swing\text\html\parser\" />
        <Message Text="$(JavaExec) -Ddtd_home=$(_DtdHome.Replace('\', '\\')) -Djava.awt.headless=true -cp $(BuildToolsOutputPath) build.tools.dtdbuilder.DTDBuilder html32 > $(GenSrc)javax\swing\text\html\parser\html32.bdtd.tmp" />
        <Exec Command="$(JavaExec) -Ddtd_home=$(_DtdHome.Replace('\', '\\')) -Djava.awt.headless=true -cp $(BuildToolsOutputPath) build.tools.dtdbuilder.DTDBuilder html32 > $(GenSrc)javax\swing\text\html\parser\html32.bdtd.tmp" />
        <Move SourceFiles="$(GenSrc)javax\swing\text\html\parser\html32.bdtd.tmp" DestinationFiles="$(GenSrc)javax\swing\text\html\parser\html32.bdtd" OverwriteReadOnlyFiles="true" />
    </Target>

    <PropertyGroup>
        <GenerateLibDependsOn>
            GenerateCaCerts;
            $(GenerateLibDependsOn);
        </GenerateLibDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <Target Name="GenerateSource" DependsOnTargets="$(GenerateSourceDependsOn)">
        <ItemGroup>
            <Compile Include="$(GenSrc)**\*.java" />
            <FileWrites Include="$(GenSrc)**\*" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDataDependsOn>
            $(GenerateDataDependsOn);
        </GenerateDataDependsOn>
    </PropertyGroup>

    <Target Name="GenerateData" DependsOnTargets="$(GenerateDataDependsOn)">
        <ItemGroup>
            <FileWrites Include="$(gendata)**\*" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CompileJavaDependsOn>
            GenerateSource;
            GenerateData;
            $(CompileJavaDependsOn);
        </CompileJavaDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <___IkvmAsyncTaskCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', 'IKVM.MSBuild.Tasks', 'IkvmAsyncTask.cs'))'))</___IkvmAsyncTaskCs>
        <___IkvmWslPathCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', 'IKVM.MSBuild.Tasks', 'IkvmWslPath.cs'))'))</___IkvmWslPathCs>
        <___IkvmUnixExecCs>$([System.IO.File]::ReadAllText('$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '..', 'IKVM.MSBuild.Tasks', 'IkvmUnixExec.cs'))'))</___IkvmUnixExecCs>
        <___CliWrapDll Condition=" '$(MSBuildRuntimeType)' == 'Core' And '$(PkgCliWrap)' != '' ">$(PkgCliWrap)\lib\netcoreapp3.0\CliWrap.dll</___CliWrapDll>
        <___CliWrapDll Condition=" '$(MSBuildRuntimeType)' != 'Core' And '$(PkgCliWrap)' != '' ">$(PkgCliWrap)\lib\net461\CliWrap.dll</___CliWrapDll>
    </PropertyGroup>

    <UsingTask TaskName="IkvmWslPath" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" Condition=" '$(___CliWrapDll)' != '' ">
        <Task>
            <Reference Include="$(___CliWrapDll)" />
            <Code Type="Class" Language="cs">
                <![CDATA[
$([MSBuild]::Unescape('$(___IkvmAsyncTaskCs)'))
$([MSBuild]::Unescape('$(___IkvmWslPathCs)'))
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="IkvmUnixExec" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" Condition=" '$(___CliWrapDll)' != '' ">
        <Task>
            <Reference Include="$(___CliWrapDll)" />
            <Code Type="Class" Language="cs">
                <![CDATA[
$([MSBuild]::Unescape('$(___IkvmAsyncTaskCs)'))
$([MSBuild]::Unescape('$(___IkvmUnixExecCs)'))
            ]]>
            </Code>
        </Task>
    </UsingTask>

</Project>
