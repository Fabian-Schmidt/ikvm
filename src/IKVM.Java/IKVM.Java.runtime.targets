<!--

    IKVM.Java.runtime.targets
    
    Imported by the .runtime projects.

-->

<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.MSBuild\buildTransitive\IKVM.MSBuild.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\IKVM.deps.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\targets\openjdk.buildtools.targets" />

    <!-- IKVM.Java uses the java executable from JAVA_HOME -->
    <Target Name="ResolveJava" Condition=" '$(JAVA_HOME)' != '' And '$(JavaPath)' == '' ">
        <PropertyGroup>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\java') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\java'))</JavaPath>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\java.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\java.exe'))</JavaPath>
            <JavaArgs></JavaArgs>
            <JavaExec Condition=" '$(JavaPath)' != '' ">"$(JavaPath)" $(JavaArgs)</JavaExec>
        </PropertyGroup>
        <Message Text="Using java executable found in JAVA_HOME at '$(JavaPath)'." Importance="high" Condition=" '$(JavaPath)' != '' " />
        <Error Text="Could not locate java executable in JAVA_HOME. Ensure JAVA_HOME is set to an appropriate bootstrap JDK." Condition=" '$(JavaPath)' == '' " />
    </Target>

    <!-- IKVM.Java uses the javac executable from JAVA_HOME: bootstrap -->
    <Target Name="ResolveJavaCompiler" Condition=" '$(JAVA_HOME)' != '' And '$(JavaCompilerPath)' == '' ">
        <PropertyGroup>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\javac') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\javac'))</JavaCompilerPath>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\javac.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\javac.exe'))</JavaCompilerPath>
            <JavaCompilerArgs></JavaCompilerArgs>
            <JavaCompilerExec Condition=" '$(JavaCompilerPath)' != '' ">"$(JavaCompilerPath)" $(JavaCompilerArgs)</JavaCompilerExec>
        </PropertyGroup>
        <Message Text="Using javac executable found in JAVA_HOME at '$(JavaCompilerPath)'." Importance="high" Condition=" '$(JavaCompilerPath)' != '' " />
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            BuildJdkBuildTools;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="DistinctServiceFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <OutputFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                OutputFiles = SourceFiles.GroupBy(i => i.GetMetadata("ServiceName")).Select(i => i.First()).ToArray();
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="GenerateServiceFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <OpenJdkTargetOs ParameterType="System.String" />
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var p = "#[" + OpenJdkTargetOs + "]";
                
                foreach (var f in SourceFiles)
                {
                    var n = f.GetMetadata("ServiceName");
                    var o = f.GetMetadata("OutputPath");
                    Directory.CreateDirectory(Path.GetDirectoryName(o));
                        
                    using var r = File.OpenText(f.ItemSpec);
                    using var w = new StreamWriter(File.Open(o, FileMode.Create));
                        
                    string line;
                    while ((line = r.ReadLine()) != null)
                    {
                        if (line.StartsWith(p))
                            line = line.Substring(p.Length);
                            
                        w.WriteLine(line);
                    }
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>
    
    <Target Name="UpdateServiceFiles">
        <ItemGroup>
            <ServiceFileResource Update="@(ServiceFileResource)">
                <OutputPath>$(IntermediateOutputPath)gensvc\%(ServiceName)</OutputPath>
            </ServiceFileResource>
        </ItemGroup>
        <DistinctServiceFiles SourceFiles="@(ServiceFileResource)">
            <Output TaskParameter="OutputFiles" ItemName="_DistinctServiceFile" />
        </DistinctServiceFiles>
    </Target>

    <Target Name="GenerateServiceFiles" DependsOnTargets="UpdateServiceFiles" Inputs="@(_DistinctServiceFile)" Outputs="@(_DistinctServiceFile->'%(OutputPath)')">
        <GenerateServiceFiles OpenJdkTargetOs="$(OpenJdkTargetOsDir)" SourceFiles="@(_DistinctServiceFile)">
            
        </GenerateServiceFiles>
    </Target>
    
    <Target Name="CollectServiceFiles" DependsOnTargets="GenerateServiceFiles">
        <ItemGroup>
            <FileWrites Include="@(_DistinctServiceFile->'%(OutputPath)')" />
            <JavaResource Include="@(_DistinctServiceFile->'%(OutputPath)')" ResourcePath="META-INF/services/%(_DistinctServiceFile.ServiceName)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            UpdateServiceFiles;
            GenerateServiceFiles;
            CollectServiceFiles;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <GenerateDependsOn>
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <Target Name="Generate" DependsOnTargets="$(GenerateDependsOn)">

    </Target>

    <PropertyGroup>
        <CompileJavaDependsOn>
            Generate;
            $(CompileJavaDependsOn);
        </CompileJavaDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="WriteTextToFile" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Path ParameterType="System.String" Required="true" />
            <Text ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
File.WriteAllBytes(Path, Encoding.UTF8.GetBytes(Text));
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Import Project="IKVM.Java.runtime.jdk.targets" />
    <Import Project="IKVM.Java.runtime.langtools.targets" />
    <Import Project="IKVM.Java.runtime.nashorn.targets" />
    <Import Project="IKVM.Java.runtime.corba.targets" />

</Project>
