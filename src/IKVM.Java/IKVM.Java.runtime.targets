<!--

    IKVM.Java.runtime.targets
    
    Imported by the .runtime projects.

-->

<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <Import Project="$(MSBuildThisFileDirectory)..\IKVM.MSBuild\buildTransitive\IKVM.MSBuild.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\IKVM.deps.targets" />
    <Import Project="$(MSBuildThisFileDirectory)..\..\targets\openjdk.buildtools.targets" />

    <!-- IKVM.Java uses the java executable from JAVA_HOME -->
    <Target Name="ResolveJava" Condition=" '$(JAVA_HOME)' != '' And '$(JavaPath)' == '' ">
        <PropertyGroup>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\java') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\java'))</JavaPath>
            <JavaPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\java.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\java.exe'))</JavaPath>
            <JavaArgs></JavaArgs>
            <JavaExec Condition=" '$(JavaPath)' != '' ">"$(JavaPath)" $(JavaArgs)</JavaExec>
        </PropertyGroup>
        <Message Text="Using java executable found in JAVA_HOME at '$(JavaPath)'." Importance="high" Condition=" '$(JavaPath)' != '' " />
        <Error Text="Could not locate java executable in JAVA_HOME. Ensure JAVA_HOME is set to an appropriate bootstrap JDK." Condition=" '$(JavaPath)' == '' " />
    </Target>

    <!-- IKVM.Java uses the javac executable from JAVA_HOME: bootstrap -->
    <Target Name="ResolveJavaCompiler" Condition=" '$(JAVA_HOME)' != '' And '$(JavaCompilerPath)' == '' ">
        <PropertyGroup>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' == 'true' And Exists('$(JAVA_HOME)\bin\javac') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\javac'))</JavaCompilerPath>
            <JavaCompilerPath Condition=" '$([MSBuild]::IsOSUnixLike())' != 'true' And Exists('$(JAVA_HOME)\bin\javac.exe') ">$([System.IO.Path]::GetFullPath('$(JAVA_HOME)\bin\javac.exe'))</JavaCompilerPath>
            <JavaCompilerArgs></JavaCompilerArgs>
            <JavaCompilerExec Condition=" '$(JavaCompilerPath)' != '' ">"$(JavaCompilerPath)" $(JavaCompilerArgs)</JavaCompilerExec>
        </PropertyGroup>
        <Message Text="Using javac executable found in JAVA_HOME at '$(JavaCompilerPath)'." Importance="high" Condition=" '$(JavaCompilerPath)' != '' " />
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            OpenJdkBuildTools;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="GetCompilePropertiesArgs" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Item ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <Args ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    var args = new TaskItem[Item.Length * 4];
                    for (int i = 0; i < Item.Length; i++)
                    {
                        args[i * 4 + 0] = new TaskItem("-compile");
                        args[i * 4 + 1] = new TaskItem(Item[i].ItemSpec);
                        args[i * 4 + 2] = new TaskItem(Path.GetFullPath(Item[i].GetMetadata("_Dest")));
                        args[i * 4 + 3] = new TaskItem(Item[i].GetMetadata("SuperName"));
                    }
                    
                    Args = args;
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="GenerateResourceBundles" DependsOnTargets="OpenJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(OpenJdkBuildToolsStampFile);@(GenerateResourceBundle)" Outputs="@(GenerateResourceBundle->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java')">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <GenerateResourceBundle Update="@(GenerateResourceBundle)">
                <_Dest>$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java</_Dest>
            </GenerateResourceBundle>
            <_Args Remove="@(_Args)" />
        </ItemGroup>

        <GetCompilePropertiesArgs Item="@(GenerateResourceBundle)">
            <Output TaskParameter="Args" ItemName="_Args" />
        </GetCompilePropertiesArgs>

        <WriteLinesToFile File="$(IntermediateOutputPath)genprop_compile.cmd" Lines="@(_Args)" Overwrite="true" />
        <MakeDir Directories="@(GenerateResourceBundle->'$(IntermediateOutputPath)genprop\%(PackagePath)')" />
        <Message Text="$(JavaExec) -cp $(OpenJdkBuildToolsOutputPath) build.tools.compileproperties.CompileProperties %40$(IntermediateOutputPath)genprop_compile.cmd" />
        <Exec Command="$(JavaExec) -cp $(OpenJdkBuildToolsOutputPath) build.tools.compileproperties.CompileProperties %40$(IntermediateOutputPath)genprop_compile.cmd" />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)genprop_compile.cmd" />
            <FileWrites Include="@(GenerateResourceBundle->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java')" />
            <Compile Include="@(GenerateResourceBundle->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java')" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            GenerateResourceBundles;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="AddPropertiesToClean" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Item ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <Args ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                    var args = new TaskItem[Item.Length * 3];
                    for (int i = 0; i < Item.Length; i++)
                    {
                        args[i * 3 + 0] = new TaskItem("-clean");
                        args[i * 3 + 1] = new TaskItem(Item[i].ItemSpec);
                        args[i * 3 + 2] = new TaskItem(Path.GetFullPath(Item[i].GetMetadata("_Dest")));
                    }
                    
                    Args = args;
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="CleanProperties" DependsOnTargets="OpenJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(OpenJdkBuildToolsStampFile);@(CleanProperties)" Outputs="@(CleanProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ResourceName).properties')">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <ItemGroup>
            <CleanProperties Update="@(CleanProperties)">
                <_Dest>$(IntermediateOutputPath)genprop\%(PackagePath)\%(ResourceName).properties</_Dest>
            </CleanProperties>
            <_Args Remove="@(_Args)" />
        </ItemGroup>

        <AddPropertiesToClean Item="@(CleanProperties)">
            <Output TaskParameter="Args" ItemName="_Args" />
        </AddPropertiesToClean>

        <WriteLinesToFile File="$(IntermediateOutputPath)genprop_clean.cmd" Lines="@(_Args)" Overwrite="true" />
        <MakeDir Directories="@(CleanProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)')" />
        <Exec Command="$(JavaExec) -cp $(OpenJdkBuildToolsOutputPath) build.tools.stripproperties.StripProperties %40$(IntermediateOutputPath)genprop_clean.cmd" />

        <ItemGroup>
            <FileWrites Include="$(IntermediateOutputPath)genprop_clean.cmd" />
            <FileWrites Include="@(CleanProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ResourceName).properties')" />
            <JavaResource Include="@(CleanProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ResourceName).properties')" ResourcePath="%(CleanProperties.PackagePath)/%(CleanProperties.ResourceName).properties" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            CleanProperties;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="DuplicateProperties" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <DestinationFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                for (int i = 0; i < SourceFiles.Length; i++)
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(DestinationFiles[i].ItemSpec));
                
                    string line;
                    using var r = File.OpenText(SourceFiles[i].ItemSpec);
                    using var w = new StreamWriter(File.Open(DestinationFiles[i].ItemSpec, FileMode.Create));
                    
                    while ((line = r.ReadLine()) != null)
                    {
                        if (line.Contains("class"))
                            line = line.Replace(SourceFiles[i].GetMetadata("Filename"), SourceFiles[i].GetMetadata("ClassName"));
                    
                        w.WriteLine(line);
                    }
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="FilterDuplicateProperties">
        <ItemGroup>
            <DuplicateProperties Remove="@(DuplicateProperties)" Condition="Exists('$(OpenJdkDir)jdk\src\share\classes\%(PackagePath)\%(ClassName).java')" />
        </ItemGroup>
    </Target>

    <Target Name="DuplicateProperties" DependsOnTargets="FilterDuplicateProperties" Inputs="$(MSBuildThisFileFullPath);@(DuplicateProperties)" Outputs="@(DuplicateProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java')">
        <DuplicateProperties SourceFiles="@(DuplicateProperties)" DestinationFiles="@(DuplicateProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java')" />

        <ItemGroup>
            <FileWrites Include="@(DuplicateProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java')" />
            <Compile Include="@(DuplicateProperties->'$(IntermediateOutputPath)genprop\%(PackagePath)\%(ClassName).java')" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            FilterDuplicateProperties;
            DuplicateProperties;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="DistinctServiceFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
            <OutputFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                OutputFiles = SourceFiles.GroupBy(i => i.GetMetadata("ServiceName")).Select(i => i.First()).ToArray();
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <UsingTask TaskName="GenerateServiceFiles" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <OpenJdkTargetOs ParameterType="System.String" />
            <SourceFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var p = "#[" + OpenJdkTargetOs + "]";
                
                foreach (var f in SourceFiles)
                {
                    var n = f.GetMetadata("ServiceName");
                    var o = f.GetMetadata("OutputPath");
                    Directory.CreateDirectory(Path.GetDirectoryName(o));
                        
                    using var r = File.OpenText(f.ItemSpec);
                    using var w = new StreamWriter(File.Open(o, FileMode.Create));
                        
                    string line;
                    while ((line = r.ReadLine()) != null)
                    {
                        if (line.StartsWith(p))
                            line = line.Substring(p.Length);
                            
                        w.WriteLine(line);
                    }
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>
    
    <Target Name="UpdateServiceFiles">
        <ItemGroup>
            <ServiceFileResource Update="@(ServiceFileResource)">
                <OutputPath>$(IntermediateOutputPath)gensvc\%(ServiceName)</OutputPath>
            </ServiceFileResource>
        </ItemGroup>
        <DistinctServiceFiles SourceFiles="@(ServiceFileResource)">
            <Output TaskParameter="OutputFiles" ItemName="_DistinctServiceFile" />
        </DistinctServiceFiles>
    </Target>

    <Target Name="GenerateServiceFiles" DependsOnTargets="UpdateServiceFiles" Inputs="@(_DistinctServiceFile)" Outputs="@(_DistinctServiceFile->'%(OutputPath)')">
        <GenerateServiceFiles OpenJdkTargetOs="$(OpenJdkTargetOsDir)" SourceFiles="@(_DistinctServiceFile)">
            
        </GenerateServiceFiles>
    </Target>
    
    <Target Name="CollectServiceFiles" DependsOnTargets="GenerateServiceFiles">
        <ItemGroup>
            <FileWrites Include="@(_DistinctServiceFile->'%(OutputPath)')" />
            <JavaResource Include="@(_DistinctServiceFile->'%(OutputPath)')" ResourcePath="META-INF/services/%(_DistinctServiceFile.ServiceName)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            UpdateServiceFiles;
            GenerateServiceFiles;
            CollectServiceFiles;
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <GenerateSourceDependsOn>
            $(GenerateSourceDependsOn);
        </GenerateSourceDependsOn>
    </PropertyGroup>

    <Target Name="GenerateSource" DependsOnTargets="$(GenerateSourceDependsOn)">

    </Target>

    <PropertyGroup>
        <CompileJavaDependsOn>
            GenerateSource;
            $(CompileJavaDependsOn);
        </CompileJavaDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <CoreCleanDependsOn>
            $(CoreCleanDependsOn);
            CleanGenerateSource;
        </CoreCleanDependsOn>
    </PropertyGroup>

    <UsingTask TaskName="WriteTextToFile" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Path ParameterType="System.String" Required="true" />
            <Text ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
File.WriteAllBytes(Path, Encoding.UTF8.GetBytes(Text));
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Import Project="IKVM.Java.runtime.jdk.targets" />
    <Import Project="IKVM.Java.runtime.langtools.targets" />

</Project>
