<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <OutputType>$(OutputType.ToLower())</OutputType>
    </PropertyGroup>

    <PropertyGroup>
        <Platform Condition="'$(Platform)' == ''">AnyCPU</Platform>
        <PlatformName Condition="'$(PlatformName)' == ''">$(Platform)</PlatformName>
        <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
        <ConfigurationName Condition="'$(ConfigurationName)' == ''">$(Configuration)</ConfigurationName>

        <BaseOutputPath Condition=" '$(BaseOutputPath)' == '' ">bin\</BaseOutputPath>
        <BaseOutputPath Condition="!HasTrailingSlash('$(BaseOutputPath)')">$(BaseOutputPath)\</BaseOutputPath>
        <OutputPath Condition=" '$(OutputPath)' == '' ">$(BaseOutputPath)$(Configuration)\$(TargetMachine)\</OutputPath>
        <OutputPath Condition="!HasTrailingSlash('$(OutputPath)')">$(OutputPath)\</OutputPath>

        <BaseIntermediateOutputPath Condition="'$(BaseIntermediateOutputPath)' == ''">obj\</BaseIntermediateOutputPath>
        <BaseIntermediateOutputPath Condition="!HasTrailingSlash('$(BaseIntermediateOutputPath)')">$(BaseIntermediateOutputPath)\</BaseIntermediateOutputPath>
        <IntermediateOutputPath Condition=" '$(IntermediateOutputPath)' == '' ">$(BaseIntermediateOutputPath)$(Configuration)\$(TargetMachine)</IntermediateOutputPath>
        <IntermediateOutputPath Condition="!HasTrailingSlash('$(IntermediateOutputPath)')">$(IntermediateOutputPath)\</IntermediateOutputPath>
    </PropertyGroup>

    <PropertyGroup>
        <DebugSymbols Condition=" '$(ConfigurationName)' == 'Debug' and '$(DebugSymbols)' == '' and '$(DebugType)'==''">true</DebugSymbols>
    </PropertyGroup>

    <PropertyGroup>
        <TargetPrefix></TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And '$(OutputType)'=='library' And $(TargetMachine.Contains('-linux-')) ">lib</TargetPrefix>
        <TargetPrefix Condition=" '$(TargetPrefix)' == '' And '$(OutputType)'=='library' And $(TargetMachine.Contains('-osx-')) ">lib</TargetPrefix>

        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)'=='exe'">.exe</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)'=='winexe'">.exe</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)'=='library' And $(TargetMachine.Contains('-windows-')) ">.dll</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)'=='library' And $(TargetMachine.Contains('-linux-')) ">.so</TargetExt>
        <TargetExt Condition=" '$(TargetExt)' == '' And '$(OutputType)'=='library' And $(TargetMachine.Contains('-osx-')) ">.dylib</TargetExt>

        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetMachine.Contains('-windows-')) ">.pdb</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetMachine.Contains('-linux-')) ">.pdb</DebugSymbolsExt>
        <DebugSymbolsExt Condition=" '$(DebugSymbolsExt)' == '' And $(TargetMachine.Contains('-osx-')) ">.pdb</DebugSymbolsExt>
    </PropertyGroup>

    <PropertyGroup>
        <ProjectName Condition=" '$(ProjectName)' == '' ">$(MSBuildProjectName)</ProjectName>
        <TargetName Condition=" '$(TargetName)' == '' ">$(ProjectName)</TargetName>
        <ProjectFileName Condition=" '$(ProjectFileName)' == '' ">$(MSBuildProjectFile)</ProjectFileName>
        <ProjectExt Condition=" '$(ProjectExt)' == '' ">$(MSBuildProjectExtension)</ProjectExt>

        <TargetFileName Condition=" '$(TargetFileName)' == '' ">$(TargetPrefix)$(TargetName)$(TargetExt)</TargetFileName>
        <DebugSymbolsFileName Condition=" '$(DebugSymbolsFileName)' == '' ">$(TargetPrefix)$(TargetName)$(DebugSymbolsExt)</DebugSymbolsFileName>

        <IntermediateTargetPath Condition=" '$(IntermediateTargetPath)' == '' ">$(IntermediateOutputPath)$(TargetFileName)</IntermediateTargetPath>
        <TargetPath Condition=" '$(TargetPath)' == '' ">$(OutputPath)$(TargetFileName)</TargetPath>

        <IntermediateDebugSymbolsPath Condition=" '$(IntermediateDebugSymbolsPath)' == '' ">$(IntermediateOutputPath)$(DebugSymbolsFileName)</IntermediateDebugSymbolsPath>
        <DebugSymbolsPath Condition=" '$(DebugSymbolsPath)' == '' ">$(OutputPath)$(DebugSymbolsFileName)</DebugSymbolsPath>
    </PropertyGroup>

    <PropertyGroup>
        <GetTargetPathDependsOn>
            $(GetTargetPathDependsOn)
        </GetTargetPathDependsOn>
    </PropertyGroup>

    <Target Name="GetTargetPath" DependsOnTargets="$(GetTargetPathDependsOn)" Returns="@(TargetPath)">
        <ItemGroup>
            <TargetPath Include="$(TargetPath)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <PreBuildEventDependsOn></PreBuildEventDependsOn>
        <PostBuildEventDependsOn></PostBuildEventDependsOn>
    </PropertyGroup>

    <Target
        Name="PreBuildEvent"
        Condition="'$(PreBuildEvent)'!=''"
        DependsOnTargets="$(PreBuildEventDependsOn)">

        <Exec WorkingDirectory="$(OutDir)" Command="$(PreBuildEvent)" />
    </Target>

    <Target
        Name="PostBuildEvent"
        Condition="'$(PostBuildEvent)'!=''"
        DependsOnTargets="$(PostBuildEventDependsOn)">

        <Exec WorkingDirectory="$(OutDir)" Command="$(PostBuildEvent)" />
    </Target>

    <PropertyGroup>
        <BuildDependsOn>
            BeforeBuild;
            CoreBuild;
            AfterBuild
        </BuildDependsOn>
    </PropertyGroup>

    <Target Name="Build" Condition=" '$(_InvalidConfigurationWarning)' != 'true' " DependsOnTargets="$(BuildDependsOn)" Returns="@(TargetPath)" />

    <Target Name="BeforeBuild"/>

    <Target Name="AfterBuild"/>

    <PropertyGroup>
        <CoreBuildDependsOn>
            PreBuildEvent;
            Compile;
            GetTargetPath;
            PrepareForRun;
            PostBuildEvent
        </CoreBuildDependsOn>
    </PropertyGroup>

    <Target Name="CoreBuild" DependsOnTargets="$(CoreBuildDependsOn)">
        <OnError ExecuteTargets="_TimeStampAfterCompile;PostBuildEvent" Condition="'$(RunPostBuildEvent)'=='Always' or '$(RunPostBuildEvent)'=='OnOutputUpdated'"/>
    </Target>

    <PropertyGroup>
        <_ProjectDefaultTargets Condition="'$(MSBuildProjectDefaultTargets)' != ''">$(MSBuildProjectDefaultTargets)</_ProjectDefaultTargets>
        <_ProjectDefaultTargets Condition="'$(MSBuildProjectDefaultTargets)' == ''">Build</_ProjectDefaultTargets>

        <RebuildDependsOn>
            BeforeRebuild;
            Clean;
            $(_ProjectDefaultTargets);
            AfterRebuild;
        </RebuildDependsOn>

        <RebuildDependsOn Condition=" '$(MSBuildProjectDefaultTargets)' == 'Rebuild' " >
            BeforeRebuild;
            Clean;
            Build;
            AfterRebuild;
        </RebuildDependsOn>
    </PropertyGroup>

    <Target Name="Rebuild" Condition=" '$(_InvalidConfigurationWarning)' != 'true' " DependsOnTargets="$(RebuildDependsOn)" Returns="$(TargetPath)"/>

    <Target Name="BeforeRebuild"/>

    <Target Name="AfterRebuild"/>

    <PropertyGroup>
        <CompileDependsOn>
            BeforeCompile;
            CoreCompile;
            AfterCompile;
        </CompileDependsOn>
    </PropertyGroup>

    <Target Name="Compile" DependsOnTargets="$(CompileDependsOn)"/>

    <Target Name="BeforeCompile" />

    <Target Name="AfterCompile" />

    <Target Name="CoreCompile">
        <MakeDir Directories="$(IntermediateOutputPath)" />

        <ItemGroup>
            <_Args Include="-v" Condition=" '$(Verbose)' == 'true' " />
            <_Args Include="--target=$(TargetMachine)" />
            <_Args Include="-shared" Condition=" '$(OutputType)' == 'library' " />
            <_Args Include="-std=$(LanguageStandard)" Condition=" '$(LanguageStandard)' != '' " />
            <_Args Include="-fms-compatibility" Condition=" '$(MsCompatibility)' == 'true' " />
            <_Args Include="-g" Condition=" '$(DebugSymbols)' == 'true' " />
            <_AdditionalIncludeDirectories Include="@(AdditionalIncludeDirectories)" />
            <_AdditionalIncludeDirectories Include="$(AdditionalIncludeDirectories)" />
            <_Args Include="@(_AdditionalIncludeDirectories->'-I%(Identity)')" Condition=" '@(_AdditionalIncludeDirectories)' != '' " />
            <_AdditionalLibraryDirectories Include="@(AdditionalLibraryDirectories)" />
            <_AdditionalLibraryDirectories Include="$(AdditionalLibraryDirectories)" />
            <_Args Include="@(_AdditionalLibraryDirectories->'-L%(Identity)')" Condition=" '@(_AdditionalLibraryDirectories)' != '' " />
            <_AdditionalDependencies Include="@(AdditionalDependencies)" />
            <_AdditionalDependencies Include="$(AdditionalDependencies)" />
            <_Args Include="@(_AdditionalDependencies->'-l%(Identity)')" Condition=" '@(_AdditionalDependencies)' != '' " />
            <_PreprocessorDefinitions Include="$(PreprocessorDefinitions)" />
            <_Args Include="@(_PreprocessorDefinitions->'-D%(Identity)')" Condition=" '@(_PreprocessorDefinitions)' != '' " />
            <_Args Include="-fuse-ld=$(UseLd)" Condition=" '$(UseLd)' != '' " />
            <_Args Include="@(Include->'-I%(Identity)')" />
            <_Args Include="$(AdditionalOptions)" Condition=" '$(AdditionalOptions)' != '' " />
            <_Args Include="@(Compile->'%(Identity)')" />
            <_Args Include="-o $(IntermediateTargetPath)" />
        </ItemGroup>

        <Exec Command="clang @(_Args, ' ')" />
    </Target>

    <PropertyGroup>
        <CopyFilesToOutputDirectoryDependsOn>

        </CopyFilesToOutputDirectoryDependsOn>
    </PropertyGroup>

    <Target Name="CopyFilesToOutputDirectory" DependsOnTargets="$(CopyFilesToOutputDirectoryDependsOn)">
        <PropertyGroup>
            <CreateHardLinksForCopyFilesToOutputDirectoryIfPossible Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)' == ''">false</CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>
            <CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)' == ''">false</CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible>
            <ErrorIfLinkFailsForCopyFilesToOutputDirectory Condition="'$(BuildingInsideVisualStudio)' == 'true' or '$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)' == ''">false</ErrorIfLinkFailsForCopyFilesToOutputDirectory>
        </PropertyGroup>

        <PropertyGroup>
            <CopyTargetToOutputDirectory Condition="'$(CopyTargetToOutputDirectory)'==''">true</CopyTargetToOutputDirectory>
            <CopyDebugSymbolsToOutputDirectory Condition="'$(CopyDebugSymbolsToOutputDirectory)'==''">true</CopyDebugSymbolsToOutputDirectory>
        </PropertyGroup>

        <Copy
            SourceFiles="$(IntermediateTargetPath)"
            DestinationFiles="$(TargetPath)"
            SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
            Retries="$(CopyRetryCount)"
            RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
            UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
            UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
            ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)"
            Condition="'$(CopyTargetToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
            <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
            <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
        </Copy>

        <Copy
            SourceFiles="$(IntermediateDebugSymbolsPath)"
            DestinationFiles="$(DebugSymbolsPath)"
            SkipUnchangedFiles="$(SkipCopyUnchangedFiles)"
            OverwriteReadOnlyFiles="$(OverwriteReadOnlyFiles)"
            Retries="$(CopyRetryCount)"
            RetryDelayMilliseconds="$(CopyRetryDelayMilliseconds)"
            UseHardlinksIfPossible="$(CreateHardLinksForCopyFilesToOutputDirectoryIfPossible)"
            UseSymboliclinksIfPossible="$(CreateSymbolicLinksForCopyFilesToOutputDirectoryIfPossible)"
            ErrorIfLinkFails="$(ErrorIfLinkFailsForCopyFilesToOutputDirectory)"
            Condition="'$(CopyDebugSymbolsToOutputDirectory)' == 'true' and '$(SkipCopyBuildProduct)' != 'true'">
            <Output TaskParameter="DestinationFiles" ItemName="MainAssembly"/>
            <Output TaskParameter="DestinationFiles" ItemName="FileWrites"/>
        </Copy>

    </Target>

    <PropertyGroup>
        <PrepareForRunDependsOn>
            CopyFilesToOutputDirectory
        </PrepareForRunDependsOn>
    </PropertyGroup>

    <Target Name="PrepareForRun" DependsOnTargets="$(PrepareForRunDependsOn)">
        
    </Target>

</Project>
