<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
using System;

namespace IKVM.Runtime.Accessors
{

    /// <summary>
    /// Defines a method accessor for a static method.
    /// </summary>
    internal abstract partial class ConstructorAccessor
    {

        public static ConstructorAccessor<Action> LazyGetVoid(ref ConstructorAccessor<Action> location, Type type)
        {
            return AccessorUtil.LazyGet(ref location, () => new ConstructorAccessor<Action>(type));
        }

        public static ConstructorAccessor<Func<TResult>> LazyGet<TResult>(ref ConstructorAccessor<Func<TResult>> location, Type type)
        {
            return AccessorUtil.LazyGet(ref location, () => new ConstructorAccessor<Func<TResult>>(type));
        }

<#
for (int i = 1; i <= 8; i++)
{
        var l = string.Join(", ", Enumerable.Range(1, i).Select(i => "TArg" + i));
#>
        public static ConstructorAccessor<Func<<#= l #>, TResult>> LazyGet<<#= l #>, TResult>(ref ConstructorAccessor<Func<<#= l #>, TResult>> location, Type type)
        {
            return AccessorUtil.LazyGet(ref location, () => new ConstructorAccessor<Func<<#= l #>, TResult>>(type));
        }

<#
}
#>
    }

}
