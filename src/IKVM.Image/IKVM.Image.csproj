<Project>
    <Import Sdk="Microsoft.Build.NoTargets" Project="Sdk.props" />

    <PropertyGroup>
        <TargetFrameworks>net472;net6.0;net8.0</TargetFrameworks>
        <PackageLicenseFile>LICENSE.md</PackageLicenseFile>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <Description>IKVM Runtime Image</Description>
        <IncludeSymbols>false</IncludeSymbols>
        <IkvmImageItemToNone>true</IkvmImageItemToNone>
        <DisableCopyToOutputDirectory>true</DisableCopyToOutputDirectory>
    </PropertyGroup>

    <ItemGroup>
        <ProjectReference Include="..\IKVM.Image.runtime.win-x64\IKVM.Image.runtime.win-x64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';win-x64;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.win-x86\IKVM.Image.runtime.win-x86.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';win-x86;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.win-arm64\IKVM.Image.runtime.win-arm64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';win-arm64;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.linux-x64\IKVM.Image.runtime.linux-x64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';linux-x64;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.linux-arm\IKVM.Image.runtime.linux-arm.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';linux-arm;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.linux-arm64\IKVM.Image.runtime.linux-arm64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';linux-arm64;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.linux-musl-x64\IKVM.Image.runtime.linux-musl-x64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';linux-musl-x64;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.linux-musl-arm\IKVM.Image.runtime.linux-musl-arm.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';linux-musl-arm;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.linux-musl-arm64\IKVM.Image.runtime.linux-musl-arm64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';linux-musl-arm64;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.osx-x64\IKVM.Image.runtime.osx-x64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';osx-x64;'))" />
        <ProjectReference Include="..\IKVM.Image.runtime.osx-arm64\IKVM.Image.runtime.osx-arm64.csproj" ReferenceOutputAssembly="true" Condition="$(_EnabledImageRuntimes.Contains(';osx-arm64;'))" />
    </ItemGroup>

    <ItemGroup>
        <None Include="..\..\LICENSE.md" Pack="true" PackagePath="." />
        <None Include="README.md" Pack="true" PackagePath="." />
        <None Include="buildTransitive\**\*" Pack="true" PackagePath="buildTransitive\%(RecursiveDir)%(Filename)%(Extension)" />
        <None Include="lib\**\*" Pack="true" PackagePath="lib\%(RecursiveDir)%(Filename)%(Extension)" />
        <Content Include="ikvm.properties" Pack="true" CopyToOutputDirectory="PreserveNewest" />
    </ItemGroup>

    <Import Sdk="Microsoft.Build.NoTargets" Project="Sdk.targets" />
    <Import Project="IKVM.Image.project.targets" />

    <!-- items to output -->
    <ItemGroup>
        <IkvmImageItem Include="..\..\README.md;..\..\LICENSE.md;..\..\THIRD_PARTY_README;..\..\TRADEMARK" TargetFramework="any" RuntimeIdentifier="any" ImagePath="%(Filename)%(Extension)" />
        <IkvmImageItem Include="ikvm\any\**\*" TargetFramework="any" RuntimeIdentifier="any" ImagePath="%(RecursiveDir)%(Filename)%(Extension)" />
        <IkvmImageItem Include="ikvm\net472\**\*" TargetFramework="net472" RuntimeIdentifier="any" ImagePath="%(RecursiveDir)%(Filename)%(Extension)" />
        <IkvmImageItem Include="ikvm\net6.0\**\*" TargetFramework="net6.0" RuntimeIdentifier="any" ImagePath="%(RecursiveDir)%(Filename)%(Extension)" />
        <IkvmImageItem Include="ikvm\net8.0\**\*" TargetFramework="net8.0" RuntimeIdentifier="any" ImagePath="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup>
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\management\**\*" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\management\%(RecursiveDir)%(Filename)%(Extension)" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\logging.properties" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\%(Filename)%(Extension)" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\classes\sun\print\*.properties*" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\%(Filename)%(Extension)" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\images\cursors\invalid32x32.gif" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\images\cursors\invalid32x32.gif" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\calendars.properties" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\%(Filename)%(Extension)" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\hijrah-config-umalqura.properties" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\%(Filename)%(Extension)" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\cmm\lcms\*.pf" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\cmm\%(Filename)%(Extension)" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\security\java.policy" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\security\java.policy" />
        <IkvmImageItem Include="$(OpenJdkDir)\build\linux-x86_64-normal-server-release\jdk\lib\security\blacklisted.certs" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\security\blacklisted.certs" />
        <IkvmImageItem Include="$(OpenJdkDir)\build\linux-x86_64-normal-server-release\jdk\lib\security\policy\limited\local_policy.jar" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\security\policy\limited\local_policy.jar" />
        <IkvmImageItem Include="$(OpenJdkDir)\build\linux-x86_64-normal-server-release\jdk\lib\security\policy\limited\US_export_policy.jar" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\security\policy\limited\US_export_policy.jar" />
        <IkvmImageItem Include="$(OpenJdkDir)\build\linux-x86_64-normal-server-release\jdk\lib\security\policy\unlimited\local_policy.jar" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\security\policy\unlimited\local_policy.jar" />
        <IkvmImageItem Include="$(OpenJdkDir)\build\linux-x86_64-normal-server-release\jdk\lib\security\policy\unlimited\US_export_policy.jar" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\security\policy\unlimited\US_export_policy.jar" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\sound.properties" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\%(Filename)%(Extension)" />
        <IkvmImageItem Include="$(OpenJdkDir)jdk\src\share\lib\net.properties" TargetFramework="any" RuntimeIdentifier="any" ImagePath="lib\%(Filename)%(Extension)" />
    </ItemGroup>

    <PropertyGroup>
        <TzDataDir>$(OpenJdkDir)jdk\make\data\tzdata</TzDataDir>
        <TzDbDat>$(IntermediateOutputPath)tzdb.dat</TzDbDat>
    </PropertyGroup>

    <ItemGroup>
        <TzFile Include="africa;antarctica;asia;australasia;europe;northamerica;pacificnew;southamerica;backward;etcetera;gmt;jdk11_backward" />
    </ItemGroup>

    <Target Name="GenerateTZDB" DependsOnTargets="OpenJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(OpenJdkBuildToolsStampFile);@(TzFile->'$(TzDataDir)\%(Identity)')" Outputs="$(TzDbDat)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Delete Files="$(TzDbDat)" />
        <Exec Command="$(JavaExec) -cp $(OpenJdkBuildToolsOutputPath) build.tools.tzdb.TzdbZoneRulesCompiler -srcdir $(TzDataDir) -dstfile $(TzDbDat) @(TzFile, ' ')" />
        <Touch Files="$(TzDbDat)" ForceTouch="true" AlwaysCreate="true" />

        <ItemGroup>
            <IkvmImageItem Include="$(TzDbDat)" ImagePath="lib\tzdb.dat" TargetFramework="any" RuntimeIdentifier="any" />
            <FileWrites Include="$(TzDbDat)" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <CurrencyDataSrc>$(OpenJdkDir)jdk\src\share\classes\java\util\CurrencyData.properties</CurrencyDataSrc>
        <CurrencyDataDst>$(IntermediateOutputPath)currency.data</CurrencyDataDst>
    </PropertyGroup>

    <Target Name="GenerateCurrencyData" DependsOnTargets="OpenJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(OpenJdkBuildToolsStampFile);$(CurrencyDataSrc)" Outputs="$(CurrencyDataDst)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Delete Files="$(CurrencyDataDst).tmp" />
        <Exec Command="$(JavaExec) -cp $(OpenJdkBuildToolsOutputPath) build.tools.generatecurrencydata.GenerateCurrencyData -o $(CurrencyDataDst).tmp &lt; $(CurrencyDataSrc)" />
        <Move SourceFiles="$(CurrencyDataDst).tmp" DestinationFiles="$(CurrencyDataDst)" />
        <Touch Files="$(CurrencyDataDst)" ForceTouch="true" AlwaysCreate="true" />

        <ItemGroup>
            <IkvmImageItem Include="$(CurrencyDataDst)" ImagePath="lib\currency.data" TargetFramework="any" RuntimeIdentifier="any" />
            <FileWrites Include="$(CurrencyDataDst)" />
            <FileWrites Include="$(CurrencyDataDst).tmp" />
        </ItemGroup>
    </Target>

    <ItemGroup>
        <CacertSrc Include="$(OpenJdkDir)jdk\make\data\cacerts\**\*" />
    </ItemGroup>

    <PropertyGroup>
        <CacertDst>$(IntermediateOutputPath)cacerts</CacertDst>
    </PropertyGroup>

    <Target Name="GenerateCacerts" DependsOnTargets="OpenJdkBuildTools;ResolveJava" Inputs="$(MSBuildThisFileFullPath);$(OpenJdkBuildToolsStampFile);@(CacertSrc)" Outputs="$(CacertDst)">
        <Error Text="Could not locate java executable." Condition=" '$(JavaPath)' == '' " />
        <Error Text="java could not be located at '$(JavaPath)'." Condition="!Exists('$(JavaPath)')" />
        <Exec Command="chmod +x $(JavaPath) &gt;/dev/null 2&gt;&amp;1" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" ContinueOnError="true" Condition="$([MSBuild]::IsOSUnixLike())" />

        <Delete Files="$(CacertDst).tmp" />
        <Exec Command="$(JavaExec) -cp $(OpenJdkBuildToolsOutputPath) build.tools.generatecacerts.GenerateCacerts $(OpenJdkDir)jdk/make/data/cacerts/ $(CacertDst).tmp" />
        <Move SourceFiles="$(CacertDst).tmp" DestinationFiles="$(CacertDst)" />
        <Touch Files="$(CacertDst)" ForceTouch="true" AlwaysCreate="true" />

        <ItemGroup>
            <IkvmImageItem Include="$(CacertDst)" ImagePath="lib\security\cacerts" TargetFramework="any" RuntimeIdentifier="any" />
            <FileWrites Include="$(CacertDst)" />
            <FileWrites Include="$(CacertDst).tmp" />
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GenerateDependsOn>
            GenerateTZDB;
            GenerateCurrencyData;
            GenerateCacerts;
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <GenerateDependsOn>
            $(GenerateDependsOn);
        </GenerateDependsOn>
    </PropertyGroup>

    <Target Name="Generate" BeforeTargets="ExpandIkvmImageItems" DependsOnTargets="$(GenerateDependsOn)">

    </Target>

</Project>
