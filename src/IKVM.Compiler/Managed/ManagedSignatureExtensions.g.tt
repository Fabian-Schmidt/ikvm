<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;

using IKVM.Compiler.Collections;

namespace IKVM.Compiler.Managed
{

    internal static partial class ManagedSignatureExtensions
    {
<#
foreach (var size in new[]
{
    1,
    2,
    3,
    4
})
{
#>

        /// <summary>
        /// Unpacks the data structures from multiple signatures.
        /// </summary>
        /// <param name="sigs"></param>
        /// <returns></returns>
        internal static void ToDataList<#= size #>(this in FixedValueList<#= size #><ManagedSignature> sigs, out FixedValueList<#= size #><ManagedSignatureData> result)
        {
            result = new FixedValueList<#= size #><ManagedSignatureData>(sigs.Count);
            for (int i = 0; i < sigs.Count; i++)
                result[i] = sigs[i].data;
        }

        /// <summary>
        /// Unpacks the data structures from multiple signatures.
        /// </summary>
        /// <param name="sigs"></param>
        /// <returns></returns>
        internal static void ToDataList<#= size #>(this ReadOnlySpan<ManagedSignature> sigs, out FixedValueList<#= size #><ManagedSignatureData> result)
        {
            result = new FixedValueList<#= size #><ManagedSignatureData>(sigs.Length);
            for (int i = 0; i < sigs.Length; i++)
                result[i] = sigs[i].data;
        }

        /// <summary>
        /// Unpacks the data structures from multiple signatures.
        /// </summary>
        /// <param name="sigs"></param>
        /// <returns></returns>
        internal static void ToDataList<#= size #>(this IReadOnlyList<ManagedSignature> sigs, out FixedValueList<#= size #><ManagedSignatureData> result)
        {
            result = new FixedValueList<#= size #><ManagedSignatureData>(sigs.Count);
            for (int i = 0; i < sigs.Count; i++)
                result[i] = sigs[i].data;
        }

        /// <summary>
        /// Unpacks the data structures from multiple signatures.
        /// </summary>
        /// <param name="sigs"></param>
        /// <returns></returns>
        internal static void ToDataList<#= size #>(this ManagedSignature[] sigs, out FixedValueList<#= size #><ManagedSignatureData> result)
        {
            result = new FixedValueList<#= size #><ManagedSignatureData>(sigs.Length);
            for (int i = 0; i < sigs.Length; i++)
                result[i] = sigs[i].data;
        }
<#
}
#>

<#
foreach (var type in new[]
{
    "ManagedSignature",
    "ManagedTypeSignature",
    "ManagedSZArraySignature",
    "ManagedArraySignature",
    "ManagedByRefSignature",
    "ManagedGenericSignature",
    "ManagedGenericConstraintSignature",
    "ManagedGenericTypeParameterSignature",
    "ManagedGenericMethodParameterSignature",
    "ManagedModifiedSignature",
    "ManagedPointerSignature",
    "ManagedFunctionPointerSignature",
})
{
#>

        /// <summary>
        /// Creates a new array type with this type as the element type.
        /// </summary>
        /// <returns></returns>
        public static ManagedSZArraySignature CreateArray(this in <#= type #> self) => new ManagedSZArraySignature(self.data);

        /// <summary>
        /// Creates a new array type with this type as the element type.
        /// </summary>
        /// <param name="rank"></param>
        /// <param name="sizes"></param>
        /// <param name="lowerBounds"></param>
        /// <returns></returns>
        public static ManagedArraySignature CreateArray(this in <#= type #> self, int rank) => new ManagedArraySignature(self.data, rank);

        /// <summary>
        /// Creates a new array type with this type as the element type.
        /// </summary>
        /// <param name="rank"></param>
        /// <param name="sizes"></param>
        /// <param name="lowerBounds"></param>
        /// <returns></returns>
        public static ManagedArraySignature CreateArray(this in <#= type #> self, int rank, FixedValueList2<int> sizes, FixedValueList2<int> lowerBounds) => new ManagedArraySignature(self.data, rank, sizes, lowerBounds);

        /// <summary>
        /// Creates a new array type with this type as the element type.
        /// </summary>
        /// <param name="rank"></param>
        /// <param name="sizes"></param>
        /// <param name="lowerBounds"></param>
        /// <returns></returns>
        public static ManagedArraySignature CreateArray(this in <#= type #> self, int rank, ReadOnlySpan<int> sizes, ReadOnlySpan<int> lowerBounds) => new ManagedArraySignature(self.data, rank, new FixedValueList2<int>(new FixedValueList2<int>(sizes)), new FixedValueList2<int>(new FixedValueList2<int>(lowerBounds)));

        /// <summary>
        /// Creates a new array type with this type as the element type.
        /// </summary>
        /// <param name="rank"></param>
        /// <param name="sizes"></param>
        /// <param name="lowerBounds"></param>
        /// <returns></returns>
        public static ManagedArraySignature CreateArray(this in <#= type #> self, int rank, IReadOnlyList<int> sizes, IReadOnlyList<int> lowerBounds) => new ManagedArraySignature(self.data, rank, new FixedValueList2<int>(new FixedValueList2<int>(sizes)), new FixedValueList2<int>(new FixedValueList2<int>(lowerBounds)));

        /// <summary>
        /// Creates a new array type with this type as the element type.
        /// </summary>
        /// <param name="rank"></param>
        /// <param name="sizes"></param>
        /// <param name="lowerBounds"></param>
        /// <returns></returns>
        public static ManagedArraySignature CreateArray(this in <#= type #> self, int rank, int[] sizes, int[] lowerBounds) => new ManagedArraySignature(self.data, rank, new FixedValueList2<int>(new FixedValueList2<int>(sizes)), new FixedValueList2<int>(new FixedValueList2<int>(lowerBounds)));

        /// <summary>
        /// Creates a new by-ref type with this type as the base type.
        /// </summary>
        /// <returns></returns>
        public static ManagedByRefSignature CreateByRef(this in <#= type #> self) => new ManagedByRefSignature(self.data);

        /// <summary>
        /// Creates a new generic type with this type as the base type.
        /// </summary>
        /// <param name="genericParameters"></param>
        /// <returns></returns>
        public static ManagedGenericSignature CreateGeneric(this in <#= type #> self, FixedValueList4<ManagedSignature> genericParameters)
        {
            ToDataList4(genericParameters, out var genericParameters_);
            return new ManagedGenericSignature(self.data, genericParameters_);
        }

        /// <summary>
        /// Creates a new generic type with this type as the base type.
        /// </summary>
        /// <param name="genericParameters"></param>
        /// <returns></returns>
        public static ManagedGenericSignature CreateGeneric(this in <#= type #> self, IReadOnlyList<ManagedSignature> genericParameters)
        {
            ToDataList4(genericParameters, out var genericParameters_);
            return new ManagedGenericSignature(self.data, genericParameters_);
        }

        /// <summary>
        /// Creates a new generic type with this type as the base type.
        /// </summary>
        /// <param name="genericParameters"></param>
        /// <returns></returns>
        public static ManagedGenericSignature CreateGeneric(this in <#= type #> self, params ManagedSignature[] genericParameters)
        {
            ToDataList4(genericParameters, out var genericParameters_);
            return new ManagedGenericSignature(self.data, genericParameters_);
        }

        /// <summary>
        /// Creates a new modified type with this type as the base type.
        /// </summary>
        /// <returns></returns>
        public static ManagedModifiedSignature CreateModified(this in <#= type #> self, in ManagedSignature modifier, bool required) => new ManagedModifiedSignature(self.data, modifier.data, required);

        /// <summary>
        /// Creates a new pointer type with this type as the base type.
        /// </summary>
        /// <returns></returns>
        public static ManagedPointerSignature CreatePointer(this in <#= type #> self) => new ManagedPointerSignature(self.data);
<#
}
#>

    }

}